 напиши Базу данных, без каких либо хитрых алгоримтов и какой либо сложности. 
база данных должна быть представлена в виде одного хэдера (читать что такое " header only library " )

ты должен на выходе дать мне один файл - database.h, импортируя который я получу файловую клиентскую базу данных. 

я должен получить такие функции, как:
store(идентификатор, массив байтов) - сохраняет на компьютер массив байтов с переданным идентификатором 
load(идентификатор) - вернуть массив байтов, которые были сохранены по данному идентификатору, либо нулевой указатель
delete(идентификатор) - удалить байты по данному идентификатору

твоя база данных должны сохранять всё в файлы в некоторый каталог. путь до каталога должен устанавливать пользователь твой базы данных - например я. Без заданного пути Бд не должна работать. 

Размер одного файла, в котором будут хранится мои данные, должен задаваться либо мной, как и путь, либо должен быть определен по умолчанию - 8 мегабайт
естественно, для всех функций должны быть тесты

в общем, давай остановимся на функции
bool store(int id, void* data);
массив байтов и есть 2ой параметр
если хочешь более правильное решение, заиспользуй шаблон
template<typename T> 
bool store(int id, T* data);
я должен мочь 100 мегабайт засунуть
и эти 100 мегабайт
будут разбиты на 100 файлов
и тебе надо как-то понимать
из каких файлов потом читать
когда я сделаю load

да, возможны любые ситуации: данные одного id хранятся во многих файлах, и данные многих id хранятся в одном файле
другими словами
я могу задать размер файла = размер свободного места на компьютере
в этом случае все данные моей программы будут в 1 файле
с другой стороны, я могу задать размер файла = 1 айт
байт
в этом случае, я получу количество файлов = количеству хранимых данных

Алгоритм функции хранения массива байтов:
Создать контейнер типа bitset и хранить там переданные данные
Получить его размер
Начать записывать в файлы каждый байт начиная с 0
 Если элемент контейнера == default_filesize
  Создать новый файл и продолжать записывать байты в него
